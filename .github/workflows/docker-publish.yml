name: Build and Push Docker Image

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      CONTAINER_NAME: APICATVSDOG
      DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/APICATVSDOG_Image

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: |
          ${{ env.DOCKER_IMAGE }}:latest
          ${{ env.DOCKER_IMAGE }}:${{ github.sha }}

    - name: Deploy to server
      run: |
        TAG=${{ github.sha }}
        ssh -o StrictHostKeyChecking=no user@your-server-ip << EOF
          set -e
          docker pull ${{ env.DOCKER_IMAGE }}:$TAG
          if [ \$(docker ps -q -f name=${{ env.CONTAINER_NAME }}) ]; then
            docker stop ${{ env.CONTAINER_NAME }}
            docker rm ${{ env.CONTAINER_NAME }}
          fi
          docker run -d -p 80:80 --name ${{ env.CONTAINER_NAME }} ${{ env.DOCKER_IMAGE }}:$TAG
        EOF
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        SSH_KNOWN_HOSTS: ${{ secrets.SSH_KNOWN_HOSTS }}
